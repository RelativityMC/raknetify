import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

evaluationDependsOn(":")

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.modrinth.minotaur'

afterEvaluate {
    license {
        header = project.file('HEADER.txt')
    }
}

archivesBaseName = project.archives_base_name + "-velocity"
group = project.maven_group + ".velocity"

repositories {
    maven {
        name 'papermc'
        url 'https://repo.papermc.io/repository/maven-public/'
    }
    ivy {
        url 'https://api.papermc.io/v2/projects/'
        patternLayout {
            artifact "[organization]/versions/[module]/builds/[revision]/downloads/[organization]-[module]-[revision](.[ext])"
        }
        metadataSources {
            it.artifact()
        }
    }
}

configurations {
    shadowInclude
}

dependencies {
//    api 'com.velocitypowered:velocity-api:3.1.1'
//    annotationProcessor 'com.velocitypowered:velocity-api:3.1.1'

    implementation 'velocity:3.4.0-SNAPSHOT:512'
//    annotationProcessor 'velocity:3.1.2-SNAPSHOT:139'

    shadowInclude implementation(project(":common"))

    // copied here to workaround incomplete fastutil in velocity
    api("com.github.RelativityMC.netty-raknet:netty-raknet-common") {
        transitive = false
    }
    api("com.github.RelativityMC.netty-raknet:netty-raknet-client")
    api("com.github.RelativityMC.netty-raknet:netty-raknet-server")
}

processResources {
    inputs.property "version", project.version

    filesMatching("velocity-plugin.json") {
        expand "version": project.version
    }
}

jar {
    exclude "META-INF/LICENSE.txt"
    exclude "META-INF/NOTICE.txt"
    from "LICENSE"
}

shadowJar {
    dependencies {
//        exclude(dependency('it.unimi.dsi:fastutil'))
    }
    exclude "META-INF/LICENSE.txt"
    exclude "META-INF/NOTICE.txt"
    minimize()
    archiveClassifier = "all"
    configurations = [ project.configurations.shadowInclude ]
    from "LICENSE"
}

assemble.dependsOn(shadowJar)

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

modrinth {
    versionNumber = project.version + "+velocity"
    versionName = project.version + " devbuild for Velocity"
    uploadFile = shadowJar
    loaders = ["velocity"]
}

task("prepareRunVelocity", dependsOn: shadowJar) {
    doFirst {
        Files.createDirectories(rootProject.projectDir.toPath().resolve("run-velocity").resolve("plugins"))
        Files.copy(shadowJar.archiveFile.getAsFile().get().toPath(), rootProject.projectDir.toPath().resolve("run-velocity").resolve("plugins").resolve("raknetify-velocity-devlaunch.jar"), StandardCopyOption.REPLACE_EXISTING)
    }
}
